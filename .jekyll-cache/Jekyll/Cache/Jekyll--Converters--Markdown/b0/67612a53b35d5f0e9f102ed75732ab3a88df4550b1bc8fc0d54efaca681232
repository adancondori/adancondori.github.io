I"æ#<h1 id="a-good-software-architecture">A good Software Architecture</h1>

<h2 id="resumen">Resumen</h2>

<p>En la actualidad los productos de software son muy variados y por lo tanto se utiliza una variedad de arquitecturas de software. Las cuales demuestran el √©xito de un proyecto de software y la aceptaci√≥n como una buena arquitectura, es por eso que en este ensayo estaremos hablando acerca de los beneficios, practicas, recomendaciones y conceptos fundamentales  para llegar a tener una buena arquitectura de software. Debo mencionarles que no se hablara acerca de tecnolog√≠as porque estas cambian r√°pidamente en nuestra profesi√≥n.</p>

<h2 id="contexto">Contexto</h2>

<p>Entonces empecemos hablando sobre ¬øQu√© es una Arquitectura de Software?, No existe una definici√≥n correcta para referirse a qu√© es la Arquitectura de Software. Sin embargo existen varias definiciones que tienen el mismo concepto, Ejemplo  ‚ÄúUna Arquitectura de Software representa la estructura o estructura del sistema, que consta de componentes de software, las propiedades visibles externas de esos componentes y la relaci√≥n entre ellos.‚Äù, teniendo como base la anterior definici√≥n podemos comentar e inferir que la arquitectura de software no solo se limita a definir los componentes y sus relaciones, sino a tener claro las relaciones entre objetos, identificaci√≥n de tecnolog√≠as adecuadas para construir el sistemas, por otro lado es importante entender los requisitos no funcionales del sistema, documentar y comunicar a las partes interesadas.</p>

<h2 id="cuerpo">Cuerpo</h2>

<p>La Arquitectura de Software sirve como vision de un plano para el equipo de desarrollo de software quienes  estar√°n implementando los requerimientos del negocio puedan tener mejor idea. La arquitectura de software no es un plano est√°tico mas al contrario es un proceso de evoluci√≥n en estrategias, t√©cnicas, patrones de dise√±o, dise√±os arquitect√≥nicos y componentes. Al construir una buena arquitectura podremos identificar los riesgos de dise√±o y mitigarlos con anticipaci√≥n.</p>

<p>Algo que he aprendido con los a√±os de experiencia en el desarrollo de software  es que ni siquiera el cliente sabra lo que quiere. Por lo tanto es importante tener alg√∫n documento para todos los requerimientos funcionales y no funcionales, ademas de una serie de entrevistas con todos los involucrados al software, todo esto con el objetivo de entender el negocio. De esta manera podremos definir una arquitectura base acorde a las necesidades del cliente, tambi√©n se podr√° definir las tecnolog√≠as que se adecuen al sistema.</p>

<p>A continuaci√≥n responderemos las siguientes preguntas:</p>

<ul>
  <li>
    <h3 id="which-criteria-do-you-use-to-define-such-architecture-as-good">Which criteria do you use to define such architecture as good?</h3>

    <p>Hay muchos criterios de calidad del sistema que podemos discutir, pero para m√≠, las siguientes caracter√≠sticas de la arquitectura son una base s√≥lida para obtener una buena arquitectura de software.</p>

    <ol>
      <li><strong>Comprensibilidad</strong>.- Significa que nuestra arquitectura es de f√°cil de entender por el equipo de desarrollo y las partes interesadas, al mismo tiempo debe abarcar todos los requisitos del negocio.</li>
      <li><strong>Facilidad de uso y Aprendizaje</strong>.- Este punto esta relacionado con los requerimientos de  UX/UI lo cual es importante al momento de definir la tecnolog√≠a en la que se desarrollara el software. Los arquitectos deben ser consciente a la hora de definir la tecnolog√≠a y la arquitectura.</li>
      <li><strong>Seguridad</strong>.- Es un factor importante para el software, consiste en restringir el acceso de los usuarios √≥ componente bas√°ndose en la autenticaci√≥n. De esta manera se podr√° proteger de ataques DDoS, inyecci√≥n de SQL y alertar al sistema. De esta manera se resguardaran los datos.</li>
      <li><strong>Fiabilidad y Disponibilidad</strong>.- Es muy importante en el dise√±o de la arquitectura de software porque las fiabilidad es un atributo del sistema responsable de la capacidad de seguir funcionando en condiciones predefinidas y la Disponibilidad representa que el sistemas estar√° funcionando el 99,9 %, caso contrario se debe tener medidas de contingencia como correos, notificaciones.</li>
      <li><strong>Interoperabilidad</strong>.- La mayor√≠a de los servicios de las aplicaciones deben comunicarse con sistemas externos para proporcionar servicios completos. Una arquitectura de software bien dise√±ada facilita la interoperabilidad de la aplicaci√≥n para comunicarse e intercambiar datos con sistemas externos o sistemas heredados.</li>
      <li><strong>Testablidad</strong>.-  La base de una buena arquitectura de software se base en asegurase de que el dise√±o de cada componente sea testeable. Una arquitectura testable debe mostrar claramente todas las interfaces, y la integraci√≥n entre los componentes. Todos los requisitos funcionales y no funcionales (NFR) del negocio deben ser coherentes y completamente comprobables. Aseg√∫rese de que todos los entornos DEV, TEST, UAT y PRODUCCI√ìN sean similares.</li>
      <li><strong>Escalabilidad</strong>.- La arquitectura tecnol√≥gica definida debe ser capas de escalar sin afectar el rendimiento. Hay dos tipos de escalado: el escalado vertical y el escalado horizontal. El escalado vertical consiste en a√±adir m√°s hardware de CPU/memoria/disco al servidor existente. El escalado horizontal consiste en dividir la carga y responder a las peticiones a√±adiendo m√°s servidores/instancias al cl√∫ster de servidores. El escalado horizontal es recomendado.</li>
    </ol>
  </li>
  <li>
    <h3 id="which-benefits-does-the-architecture-provide-over-the-inhabitants-of-the-system">Which benefits does the architecture provide over the inhabitants of the system?</h3>

    <p>Los beneficios de una buenas arquitectura son:</p>

    <ol>
      <li>Crear un plano o base solidad para el proyecto de software</li>
      <li>Escalabilidad del Proyecto de software.</li>
      <li>Reduce costos de mantenimiento.</li>
      <li>Aumenta el rendimiento del Proyecto de software.</li>
      <li>Mejor mantenibilidad en el c√≥digo.</li>
      <li>Permite cambios r√°pidos en el proyectos.</li>
      <li>Ayuda en la gesti√≥n de riesgos . Ayuda a reducir los riesgos y la posibilidad de fallas.</li>
      <li>Mayor adaptabilidad para nuevos requerimiento, ya que la arquitectura del software crea una clara separaci√≥n de preocupaciones.</li>
      <li>Mejor comunicaci√≥n con las partes interesadas</li>
      <li>Auditable y testeable.</li>
    </ol>
  </li>
  <li>
    <h3 id="which-trade-offs-have-been-made-in-the-system-to-keep-the-architecture">Which trade-offs have been made in the system to keep the architecture?</h3>

    <p>En el Dise√±o de Arquitectura existen consideraciones importantes a tomar decisiones:</p>

    <ul>
      <li>
        <p><strong>Flexibilidad frente a simplicidad</strong></p>
      </li>
      <li>
        <p><strong>Espacio contra tiempo</strong></p>
      </li>
      <li>
        <p><strong>Latencia frente a rendimiento</strong></p>
      </li>
      <li>
        <p><strong>Seguridad, Estabilidad, Mantenibilidad</strong></p>
      </li>
    </ul>
  </li>
  <li>
    <h3 id="which-recommendations-for-improvements-you-have-over-the-architecture">Which recommendations for improvements you have over the architecture?</h3>

    <p>Para el dise√±o de una buena arquitectura es importante tener un equipo multi-diciplinario y algunos de sus integrantes tengan varios a√±os de experiencia en el desarrollo de software, a continuaci√≥n voy a listar algunas recomendaciones que utilidad y investigado cuando he desarrollado software.</p>

    <ol>
      <li>Analizar y Verificar si existen dependencias con componentes, API, externos. En caso de existir se debe definir el protocolo de comunicaci√≥n.</li>
      <li>Tener estrecha comunicaci√≥n  con el cliente para conocer el proceso y los requerimientos de la soluci√≥n.</li>
      <li>Definir qu√© patrones de arquitectura se va a utilizar.</li>
      <li>Definir qu√© componentes se va utilizar  o se va crear.</li>
      <li>Recomendar que el equipo tenga conocimientos de algunos conceptos como SOLID, KISS, DRY y YAGNI, estos conceptos ayudara a que el equipo pueda realizar un c√≥digo mantenible.</li>
      <li>Conocer y aplicar patrones de dise√±o, refactorizaci√≥n los cuales nos ayudaran a tener un c√≥digo limpio.</li>
    </ol>
  </li>
</ul>

<h2 id="conclusi√≥n">Conclusi√≥n</h2>

<p>En este articulo he presentado mis investigaciones he ideas sobre cu√°les deber√≠an ser las caracter√≠sticas de una buena arquitectura de software. Cada una de estas caracter√≠sticas merece una discusi√≥n m√°s larga y tambi√©n hay otras caracter√≠sticas que no se tocan.</p>

<p>La arquitectura de software que dise√±es siempre debe estar enfocada a lo que necesita el cliente, en entender que es lo que nuestro software va a trabajar y c√≥mo lo va a hacer. Pudiendo ser capaces de conocer los pro y contras de cada opci√≥n que tomemos desde antes de empezar a codificar.</p>

:ET